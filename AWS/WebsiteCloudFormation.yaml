AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation to deploy web application to s3 bucket and provision a CloudFront distribution'
Parameters:
  WebAppS3BucketName:
    Description: Web app S3 bucket name
    Type: String
  Domain1:
    Description: Web app S3 bucket name
    Type: String
  Domain2:
    Description: Another Domain that should redirect to the main website.
    Type: String
Resources:
    ## Specifying the S3 Bucket for Web App
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          Ref: WebAppS3BucketName
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3BucketName
        PolicyDocument:
          Statement:
            - Sid: WebAppGetObject
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - " "
                  - - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                    - Ref: S3OriginAccessIdentity
              Action:
              - s3:GetObject
              - s3:ListObjects
              Resource:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebAppS3Bucket
                  - "/*"
    S3OriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig: 
          Comment: !Join ['-', [!Ref WebAppS3BucketName, 'origin', 'access', 'identity']]
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn: WebAppS3BucketPolicy
      Properties:
        DistributionConfig:
          HttpVersion: 'http2and3'
          IPV6Enabled: true
          PriceClass: PriceClass_100
          Origins:
            - DomainName: !GetAtt [WebAppS3Bucket, DomainName]
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              ## CustomOriginConfig:
              ##  HTTPPort: 80
              ##  HTTPSPort: 443
              ##  OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                  - ''
                  - - origin-access-identity/cloudfront/
                    - Ref: S3OriginAccessIdentity
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
          - Ref: Domain1
          - Ref: Domain2
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            CachedMethods:
            - GET
            - HEAD
            Compress: true
            DefaultTTL: 60
            MaxTTL: 3153600
            MinTTL: 30
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:us-east-1:987028759254:certificate/ee1bf5ec-0564-46df-9428-aa1f9efd4ded'
            MinimumProtocolVersion: 'TLSv1.2_2021'
            SslSupportMethod: 'sni-only'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
Outputs:
  WebAppCloudFrontDistributionOutput:
    Value:
      'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
