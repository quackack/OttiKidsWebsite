AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation to deploy web application to s3 bucket and provision a CloudFront distribution'
Parameters:
  WebAppS3BucketName:
    Description: Web app S3 bucket name
    Type: String
  NewEmailDomain:
    Description: The domain of the new email - eg, stemforestbooks.com
    Type: String
  NewEmailAddress:
    Description: The email address we are creating - eg, info@stemforestbooks.com
    Type: String
  ForwardToEmailAddress:
    Description: The email address we want to forward to - eg, stemforestbooks@gmail.com
    Type: String
  
Resources:
    ## Specifying the S3 Bucket for Web App
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          Ref: WebAppS3BucketName
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3BucketName
        PolicyDocument:
          Statement:
            - Sid: WebAppGetObject
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - " "
                  - - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                    - Ref: S3OriginAccessIdentity
              Action:
              - s3:GetObject
              Resource:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebAppS3Bucket
                  - "/*"
    S3OriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig: 
          Comment: !Join ['-', [!Ref WebAppS3BucketName, 'origin', 'access', 'identity']]
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn: WebAppS3BucketPolicy
      Properties:
        DistributionConfig:
          HttpVersion: 'http2and3'
          IPV6Enabled: true
          PriceClass: PriceClass_100
          Origins:
            - DomainName: !GetAtt [WebAppS3Bucket, DomainName]
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              ## CustomOriginConfig:
              ##  HTTPPort: 80
              ##  HTTPSPort: 443
              ##  OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                  - ''
                  - - origin-access-identity/cloudfront/
                    - Ref: S3OriginAccessIdentity
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
          - ottibooks.com
          - leafslibrary.com
          - stemforestbooks.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            CachedMethods:
            - GET
            - HEAD
            Compress: true
            DefaultTTL: 60
            MaxTTL: 3153600
            MinTTL: 30
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:us-east-1:987028759254:certificate/00d068c7-b6b8-4f26-8a82-1936284cca9a'
            MinimumProtocolVersion: 'TLSv1.2_2021'
            SslSupportMethod: 'sni-only'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    
    ## This section is to set up our email service.
    # Email ID of the new email domain
    EmailSES:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: !Ref NewEmailDomain
        DkimSigningAttributes: 
          NextSigningKeyLength: RSA_2048_BIT
    # ID of the email to forward to.
    ForwardToEmailSES:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: !Ref ForwardToEmailAddress
    # Makes the domain name route emails to the appropriate simple email service address
    WebsiteDNS:
     Type: AWS::Route53::RecordSetGroup
     Properties:
       HostedZoneId: Z0523531R8342LRY05CJ
       RecordSets:
         - Name:
             Fn::GetAtt: [ EmailSES, DkimDNSTokenName1 ]
           Type: CNAME
           TTL: 600
           ResourceRecords:
             - Fn::GetAtt: [ EmailSES, DkimDNSTokenValue1 ]
         - Name:
             Fn::GetAtt: [ EmailSES, DkimDNSTokenName2 ]
           Type: CNAME
           TTL: 600
           ResourceRecords:
             - Fn::GetAtt: [ EmailSES, DkimDNSTokenValue2 ]
         - Name:
             Fn::GetAtt: [ EmailSES, DkimDNSTokenName3 ]
           Type: CNAME
           TTL: 600
           ResourceRecords:
             - Fn::GetAtt: [ EmailSES, DkimDNSTokenValue3 ]
         - Name: stemforestbooks.com
           Type: MX
           TTL: 600
           ResourceRecords:
             - '10 inbound-smtp.us-east-2.amazonaws.com'  # this will depend on your reg
    
    # The notification that will forward emails to a lambda
    EmailToLambdaSNS:
     Type: AWS::SNS::Topic
     Properties:
       Subscription:
         - Endpoint: 
             Fn::GetAtt: [ EmailForwardLambdaFunction , "Arn" ]
           Protocol: lambda 
       TopicName: 'ForwardEmailTopic'

    # A rule set that will hold instructions on what to do with an email sent to the simple email service
    EmailRuleSet:
     Type: AWS::SES::ReceiptRuleSet
     Properties:
       RuleSetName: 'ForwardEmailToGmail'
    # The actual rules for the rule set
    EmailRule:
     Type: AWS::SES::ReceiptRule
     Properties:
       Rule:
         Actions:
           - SNSAction:
               TopicArn:
                 Ref: EmailToLambdaSNS  # name of your SNS resource
         Enabled: true
         Name: 'sendEmailToForwardSNSRule'
         ScanEnabled: true
         Recipients:
           - !Ref NewEmailAddress
       RuleSetName:
         Ref: EmailRuleSet  # name of your rule set resource

    ##
    # The email forwarding lambda
    ##
    #Lambda Permissions
    LambdaEmailForwardRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
            Action: ['sts:AssumeRole']
        Path: /
        ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                Resource:
                 - !Sub "arn:aws:ses:us-east-2:${AWS::AccountId}:identity/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
    EmailForwardLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: !Sub |
                "use strict";
                var AWS = require("aws-sdk");
                const ses = new AWS.SES({apiVersion: "2010-12-01"});
                console.log("AWS Lambda SES Forwarder // @arithmetric // @Quackack modified");
                // Based on https://github.com/arithmetric/aws-lambda-ses-forwarder/blob/master/index.js
                exports.handler = function(event, context, callback, overrides) {
                  //Check if the event is invalid
                  if (!event ||
                        !event.hasOwnProperty("Records") ||
                        event.Records.length !== 1 ||
                        !event.Records[0].hasOwnProperty("EventSource") ||
                        event.Records[0].EventSource !== "aws:sns" ||
                        event.Records[0].EventVersion !== "1.0") {
                    console.log("SNS of wrong format.");
                    console.log(event);
                    if (!event.hasOwnProperty("Records") ||
                        event.Records.length !== 1) {
                        return { statusCode: 400,  body: "Wrong Number Of Records." };
                    }
                    if (!event.Records[0].hasOwnProperty("eventSource") ||
                        event.Records[0].eventSource !== "aws:sns") {
                        return { statusCode: 400,  body: "Wrong Source." };
                    }
                    if (event.Records[0].eventVersion !== "1.0") {
                        return { statusCode: 400,  body: "Wrong SNS Version." };
                    }
                    return { statusCode: 400,  body: "Mystery Validation Error." };
                  }
                  //Read the email.
                  var emailData = JSON.parse(event.Records[0].Sns.Message);
                  var headers =  emailData.mail.commonHeaders;
                  var fullEmail = Buffer.from(emailData.content, "base64").toString("UTF-8");
                  var body = fullEmail;
                  if (fullEmail.indexOf("<html>") >= 0 && fullEmail.indexOf("</html>") > fullEmail.indexOf("<html>")) {
                      body = fullEmail.substring(fullEmail.indexOf("<html>"), fullEmail.indexOf("</html>") + 7);
                  }
                  if (fullEmail.indexOf("boundary=\"") >= 0) {
                      var boundaryStart = fullEmail.substring(fullEmail.indexOf("boundary=\"") + 10);
                      var boundary = boundaryStart.substring(0, boundaryStart.indexOf("\""));
                      var currentBody = boundaryStart.substring(2);
                      body = currentBody.substring(boundaryStart.indexOf(boundary) + boundary.length);
                  }
                  //Make Send Request
                  var sesRequest = {
                            Destination: { ToAddresses: ["${ForwardToEmailAddress}"]},
                            Source: "${NewEmailAddress}",
                            ReplyToAddresses: headers.from,
                            Message: {
                                Body: {
                                    Html: {
                                        Charset: "UTF-8",
                                        Data: body
                                    }
                                },
                                Subject: {
                                    Charset: "UTF-8",
                                    Data: headers.subject
                                }
                            }
                        };
                  //Send The Email
                  console.log("Got email and recipiants.");
                  console.log("Full Email:" + fullEmail);
                  console.log("Found Body:" + body);
                  ses.sendEmail(sesRequest, (err, data) => {
                      if (err) {
                          return console.log(err, err.stack);
                      } else {
                          console.log("Email sent.", data);
                      }
                  });
                };
        Runtime: nodejs16.x
        Architectures:
          - arm64
        Role:
          Fn::GetAtt: [ LambdaEmailForwardRole , "Arn" ]
        Timeout: 60
#        Events:
#          SNS1:
#            Type: SNS
#            Properties:
#              Topic:
#                Ref: EmailToLambdaSNS
    # Explicitely add permission for SNS to trigger lambda
    LambdaFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt EmailForwardLambdaFunction.Arn
        Principal: sns.amazonaws.com

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
Outputs:
  WebAppCloudFrontDistributionOutput:
    Value:
      Fn::GetAtt: [ WebAppCloudFrontDistribution, DomainName ]
